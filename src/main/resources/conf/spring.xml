<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 数据库配置信息写在一个独立的文件，便于管理-->
    <!-- 让spring知道配置文件位置 -->

    <context:property-placeholder location="classpath:conf/jabc.properties"/>

    <!-- 数据源 -->
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="maxActive" value="${jadc.maxActive}"></property>
    </bean>

    <!-- SqlSessionFactory -->
    <!-- 声明SqlSessionFactoryBean类,这个类内部创建sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="myDataSource"/>
        <!-- configLocation是Resource类型，用来读取配置文件 -->
        <property name="configLocation" value="classpath:conf/mybatis.xml"/>
    </bean>

    <!-- dao（通过动态代理创建dao的代理类） -->
    <!-- 创建dao对象，使用sqlSession的getMapper(xx.class) -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 指定SqlSessionFactory的对象id -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 指定包名，包名是dao接口所在包。MapperScannerConfigurer会扫描这个包所有接口，
             把每个接口都执行一次getMapper()方法，得到每个接口的dao对象。
             创建好的dao对象放入spring容器中 默认名称为接口首字母小写-->
        <!-- 多个包可用 逗号 隔开 -->
        <property name="basePackage" value="com.hz.dao"/>
    </bean>

    <!-- 注册service对象 -->
    <context:component-scan base-package="com.hz.service"/>

    <!-- 使用spring事务处理 -->
    <!-- 1.声明事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 声明连接源 -->
        <property name="dataSource" ref="myDataSource"/>
    </bean>

    <!--1.1 开启事务注解驱动，告诉spring使用注解管理事务，创建代理对象
            transaction-manager 代表事务管理器id-->
    <tx:annotation-driven transaction-manager="transactionManager"/>


</beans>